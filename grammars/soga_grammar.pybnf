# Grammar for a SOGA program

<fc> ::= <code>

<code> ::= <stmt> | <stmt>{::}<code>

<stmt> ::= <instr> | <array>

# Definition of an array

<array> ::= array[<num>] <idv>;


#Definition of instruction

<instr> ::= <assignment> | <conditional> | <loop>

#Assignment

<assignment> ::= <symvars> = <const>; | <symvars> = <add>; | <symvars> = <mul>;

<symvars> ::= <idv> | <idd>
<idd> ::= <idv>[<num>]
<numerical> ::= <num> | <idd>

<const> ::= <const_term> | <const_term> + <const_term> | <const_term> - <const_term>
<const_term> ::= <num> | <idd> | <num> * <numerical> | <idd> * <idd>

<add> ::= <add_term> | (<add_term> + <add_term>) | (<add_term>  - <add_term>)
<add_term> ::= <vars> | <numerical>  * <vars> | <const_term>
<vars> ::= <symvars> | <gm> | <uniform>
<gm> ::= gm(<list>,<list>,<list>)
<list> ::= [<element>]
<element> ::= <num> | <num>,<element>
<uniform> ::= uniform(<list>, <num>)

<mul> ::= (<vars> * <vars>) | <numerical> * (<vars> * <vars>)


#Conditional

<conditional> ::= <ifclause> <elseclause> end if;

<ifclause> ::= if <bexpr> { {: <block> :} }
<bexpr> ::= <lexpr> <loperator> <numerical>  | <symvars> <equal> <numerical> 
<lexpr> ::= <monom> | <monom> + <lexpr> | <monom> - <lexpr>
<monom> ::= <vars> | <num> * <vars> | <idd> * <vars>
<loperator> ::=  < | <= | >= | >
<equal> ::= == | != 

<elseclause> ::= else { {: <block> :} }
<block> ::= <instr> | <instr> {::} <block>


#Loop

<loop> ::= for <idv> in range(<numerical>) { {: <block> :} } end for;


#Terminal nodes

<num> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
<idv> ::=  a | b | c | d | e
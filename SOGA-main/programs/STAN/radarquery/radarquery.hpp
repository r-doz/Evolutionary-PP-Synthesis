
// Code generated by stanc v2.30.0
#include <stan/model/model_header.hpp>
namespace radarquery_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 88> locations_array__ = 
{" (found before start of program)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 2, column 1 to column 27)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 3, column 6 to column 42)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 4, column 1 to column 27)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 5, column 1 to column 9)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 6, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 7, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 8, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 9, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 10, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 11, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 12, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 13, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 14, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 15, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 16, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 17, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 18, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 19, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 20, column 1 to column 28)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 21, column 6 to column 32)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 24, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 27, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 30, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 33, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 36, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 39, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 42, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 45, column 6 to column 13)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 25, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 28, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 31, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 34, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 37, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 40, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 43, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 46, column 6 to column 18)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 49, column 1 to column 20)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 50, column 6 to column 26)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 52, column 1 to column 10)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 59, column 3 to column 11)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 58, column 9 to line 60, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 57, column 3 to column 11)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 56, column 21 to line 58, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 56, column 2 to line 60, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 55, column 8 to line 61, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 54, column 2 to column 10)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 53, column 16 to line 55, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 53, column 1 to line 61, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 62, column 1 to column 20)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 63, column 1 to column 25)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 65, column 1 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 79, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 80, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 78, column 9 to line 81, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 76, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 77, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 75, column 21 to line 78, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 75, column 2 to line 81, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 74, column 8 to line 82, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 71, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 72, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 70, column 9 to line 73, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 68, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 69, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 67, column 22 to line 70, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 67, column 2 to line 73, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 66, column 16 to line 74, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 66, column 1 to line 82, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 97, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 98, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 96, column 9 to line 99, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 94, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 95, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 93, column 21 to line 96, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 93, column 2 to line 99, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 92, column 8 to line 100, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 89, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 90, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 88, column 9 to line 91, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 86, column 3 to column 24)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 87, column 3 to column 17)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 85, column 22 to line 88, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 85, column 2 to line 91, column 3)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 84, column 10 to line 92, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 84, column 1 to line 100, column 2)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 102, column 1 to column 29)",
 " (in '../../programs/STAN/radarquery/radarquery.stan', line 103, column 1 to column 27)"};




class radarquery_model final : public model_base_crtp<radarquery_model> {

 private:
   
  
 
 public:
  ~radarquery_model() { }
  
  inline std::string model_name() const final { return "radarquery_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.0", "stancflags = "};
  }
  
  
  radarquery_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "radarquery_model_namespace::radarquery_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 5 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "radarquery_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ bi1 = DUMMY_VAR__;
      current_statement__ = 1;
      bi1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      std::vector<local_scalar_t__> unif =
         std::vector<local_scalar_t__>(5, DUMMY_VAR__);
      current_statement__ = 2;
      unif = in__.template read_constrain_lub<std::vector<local_scalar_t__>, 
               jacobian__>(0, 1, lp__, 5);
      local_scalar_t__ x1 = DUMMY_VAR__;
      current_statement__ = 3;
      x1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             10, lp__);
      local_scalar_t__ x2 = DUMMY_VAR__;
      current_statement__ = 4;
      x2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ a1 = DUMMY_VAR__;
      current_statement__ = 5;
      a1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      local_scalar_t__ a2 = DUMMY_VAR__;
      current_statement__ = 6;
      a2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      local_scalar_t__ b1 = DUMMY_VAR__;
      current_statement__ = 7;
      b1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -1, 0, lp__);
      local_scalar_t__ b2 = DUMMY_VAR__;
      current_statement__ = 8;
      b2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      local_scalar_t__ c1 = DUMMY_VAR__;
      current_statement__ = 9;
      c1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      local_scalar_t__ c2 = DUMMY_VAR__;
      current_statement__ = 10;
      c2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      local_scalar_t__ d1 = DUMMY_VAR__;
      current_statement__ = 11;
      d1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      local_scalar_t__ d2 = DUMMY_VAR__;
      current_statement__ = 12;
      d2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      local_scalar_t__ e1 = DUMMY_VAR__;
      current_statement__ = 13;
      e1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      local_scalar_t__ e2 = DUMMY_VAR__;
      current_statement__ = 14;
      e2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      local_scalar_t__ f1 = DUMMY_VAR__;
      current_statement__ = 15;
      f1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -1, 0, lp__);
      local_scalar_t__ f2 = DUMMY_VAR__;
      current_statement__ = 16;
      f2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      local_scalar_t__ g1 = DUMMY_VAR__;
      current_statement__ = 17;
      g1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      local_scalar_t__ g2 = DUMMY_VAR__;
      current_statement__ = 18;
      g2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      local_scalar_t__ h1 = DUMMY_VAR__;
      current_statement__ = 19;
      h1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      local_scalar_t__ h2 = DUMMY_VAR__;
      current_statement__ = 20;
      h2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 29;
      a = (a1 + a2);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 30;
      b = (b1 + b2);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 31;
      c = (c1 + c2);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 32;
      d = (d1 + d2);
      local_scalar_t__ e = DUMMY_VAR__;
      current_statement__ = 33;
      e = (e1 + e2);
      local_scalar_t__ f = DUMMY_VAR__;
      current_statement__ = 34;
      f = (f1 + f2);
      local_scalar_t__ g = DUMMY_VAR__;
      current_statement__ = 35;
      g = (g1 + g2);
      local_scalar_t__ h = DUMMY_VAR__;
      current_statement__ = 36;
      h = (h1 + h2);
      {
        current_statement__ = 37;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(bi1, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(unif, 0, 1));
        local_scalar_t__ bi2 = DUMMY_VAR__;
        current_statement__ = 48;
        if (stan::math::logical_lt(bi1, 0.2)) {
          current_statement__ = 46;
          bi2 = 1;
        } else {
          current_statement__ = 44;
          if (stan::math::logical_lt(
                stan::model::rvalue(unif, "unif", stan::model::index_uni(1)),
                0.2)) {
            current_statement__ = 42;
            bi2 = 1;
          } else {
            current_statement__ = 40;
            bi2 = 0;
          }
        }
        current_statement__ = 49;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(x1, 0, 10));
        current_statement__ = 50;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(x2, x1, 1.4142));
        std::vector<local_scalar_t__> o =
           std::vector<local_scalar_t__>(2, DUMMY_VAR__);
        current_statement__ = 68;
        if (stan::math::logical_lt(bi1, 0.2)) {
          current_statement__ = 66;
          if (stan::math::logical_lt(
                stan::model::rvalue(unif, "unif", stan::model::index_uni(2)),
                0.83)) {
            current_statement__ = 63;
            lp_accum__.add(
              (stan::math::logical_lt(a, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 64;
            stan::model::assign(o, (x1 + a),
              "assigning variable o", stan::model::index_uni(1));
          } else {
            current_statement__ = 60;
            lp_accum__.add(
              (stan::math::logical_gt(b, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 61;
            stan::model::assign(o, (x1 + b),
              "assigning variable o", stan::model::index_uni(1));
          }
        } else {
          current_statement__ = 58;
          if (stan::math::logical_lt(
                stan::model::rvalue(unif, "unif", stan::model::index_uni(3)),
                0.5)) {
            current_statement__ = 55;
            lp_accum__.add(
              (stan::math::logical_lt(c, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 56;
            stan::model::assign(o, (x1 + c),
              "assigning variable o", stan::model::index_uni(1));
          } else {
            current_statement__ = 52;
            lp_accum__.add(
              (stan::math::logical_gt(d, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 53;
            stan::model::assign(o, (x1 + d),
              "assigning variable o", stan::model::index_uni(1));
          }
        }
        current_statement__ = 85;
        if (stan::math::as_bool(bi2)) {
          current_statement__ = 83;
          if (stan::math::logical_lt(
                stan::model::rvalue(unif, "unif", stan::model::index_uni(4)),
                0.83)) {
            current_statement__ = 80;
            lp_accum__.add(
              (stan::math::logical_lt(e, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 81;
            stan::model::assign(o, (x2 + e),
              "assigning variable o", stan::model::index_uni(2));
          } else {
            current_statement__ = 77;
            lp_accum__.add(
              (stan::math::logical_gt(f, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 78;
            stan::model::assign(o, (x2 + f),
              "assigning variable o", stan::model::index_uni(2));
          }
        } else {
          current_statement__ = 75;
          if (stan::math::logical_lt(
                stan::model::rvalue(unif, "unif", stan::model::index_uni(4)),
                0.5)) {
            current_statement__ = 72;
            lp_accum__.add(
              (stan::math::logical_lt(g, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 73;
            stan::model::assign(o, (x2 + g),
              "assigning variable o", stan::model::index_uni(2));
          } else {
            current_statement__ = 69;
            lp_accum__.add(
              (stan::math::logical_gt(h, 0) ?
                 stan::math::promote_scalar<int>(1) :
                 stan::math::promote_scalar<int>(0)));
            current_statement__ = 70;
            stan::model::assign(o, (x2 + h),
              "assigning variable o", stan::model::index_uni(2));
          }
        }
        current_statement__ = 86;
        lp_accum__.add(
          (
             stan::math::logical_eq(
               stan::model::rvalue(o, "o", stan::model::index_uni(1)), 5) ?
             stan::math::promote_scalar<int>(1) :
             stan::math::promote_scalar<int>(0)));
        current_statement__ = 87;
        lp_accum__.add(
          (stan::math::logical_eq(bi1, 1) ?
             stan::math::promote_scalar<int>(1) :
             stan::math::promote_scalar<int>(0)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "radarquery_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double bi1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      bi1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      std::vector<double> unif =
         std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      unif = in__.template read_constrain_lub<std::vector<local_scalar_t__>, 
               jacobian__>(0, 1, lp__, 5);
      double x1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      x1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             10, lp__);
      double x2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      x2 = in__.template read<local_scalar_t__>();
      double a1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      a1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      double a2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      a2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      double b1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      b1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -1, 0, lp__);
      double b2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      b2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      double c1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      c1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      double c2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      c2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      double d1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      d1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      double d2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      d2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      double e1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      e1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      double e2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      e2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      double f1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      f1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -1, 0, lp__);
      double f2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      f2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      double g1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      g1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      double g2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      g2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      double h1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      h1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
             -5, 0, lp__);
      double h2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 20;
      h2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             5, lp__);
      double a = std::numeric_limits<double>::quiet_NaN();
      double b = std::numeric_limits<double>::quiet_NaN();
      double c = std::numeric_limits<double>::quiet_NaN();
      double d = std::numeric_limits<double>::quiet_NaN();
      double e = std::numeric_limits<double>::quiet_NaN();
      double f = std::numeric_limits<double>::quiet_NaN();
      double g = std::numeric_limits<double>::quiet_NaN();
      double h = std::numeric_limits<double>::quiet_NaN();
      out__.write(bi1);
      out__.write(unif);
      out__.write(x1);
      out__.write(x2);
      out__.write(a1);
      out__.write(a2);
      out__.write(b1);
      out__.write(b2);
      out__.write(c1);
      out__.write(c2);
      out__.write(d1);
      out__.write(d2);
      out__.write(e1);
      out__.write(e2);
      out__.write(f1);
      out__.write(f2);
      out__.write(g1);
      out__.write(g2);
      out__.write(h1);
      out__.write(h2);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 29;
      a = (a1 + a2);
      current_statement__ = 30;
      b = (b1 + b2);
      current_statement__ = 31;
      c = (c1 + c2);
      current_statement__ = 32;
      d = (d1 + d2);
      current_statement__ = 33;
      e = (e1 + e2);
      current_statement__ = 34;
      f = (f1 + f2);
      current_statement__ = 35;
      g = (g1 + g2);
      current_statement__ = 36;
      h = (h1 + h2);
      if (emit_transformed_parameters__) {
        out__.write(a);
        out__.write(b);
        out__.write(c);
        out__.write(d);
        out__.write(e);
        out__.write(f);
        out__.write(g);
        out__.write(h);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ bi1 = DUMMY_VAR__;
      bi1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, bi1);
      std::vector<local_scalar_t__> unif =
         std::vector<local_scalar_t__>(5, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        unif[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lub(0, 1, unif);
      local_scalar_t__ x1 = DUMMY_VAR__;
      x1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 10, x1);
      local_scalar_t__ x2 = DUMMY_VAR__;
      x2 = in__.read<local_scalar_t__>();
      out__.write(x2);
      local_scalar_t__ a1 = DUMMY_VAR__;
      a1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-5, 0, a1);
      local_scalar_t__ a2 = DUMMY_VAR__;
      a2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 5, a2);
      local_scalar_t__ b1 = DUMMY_VAR__;
      b1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 0, b1);
      local_scalar_t__ b2 = DUMMY_VAR__;
      b2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, b2);
      local_scalar_t__ c1 = DUMMY_VAR__;
      c1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-5, 0, c1);
      local_scalar_t__ c2 = DUMMY_VAR__;
      c2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 5, c2);
      local_scalar_t__ d1 = DUMMY_VAR__;
      d1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-5, 0, d1);
      local_scalar_t__ d2 = DUMMY_VAR__;
      d2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 5, d2);
      local_scalar_t__ e1 = DUMMY_VAR__;
      e1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-5, 0, e1);
      local_scalar_t__ e2 = DUMMY_VAR__;
      e2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 5, e2);
      local_scalar_t__ f1 = DUMMY_VAR__;
      f1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 0, f1);
      local_scalar_t__ f2 = DUMMY_VAR__;
      f2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, f2);
      local_scalar_t__ g1 = DUMMY_VAR__;
      g1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-5, 0, g1);
      local_scalar_t__ g2 = DUMMY_VAR__;
      g2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 5, g2);
      local_scalar_t__ h1 = DUMMY_VAR__;
      h1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-5, 0, h1);
      local_scalar_t__ h2 = DUMMY_VAR__;
      h2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 5, h2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"bi1", "unif", "x1", "x2", "a1", "a2",
      "b1", "b2", "c1", "c2", "d1", "d2", "e1", "e2", "f1", "f2", "g1", "g2",
      "h1", "h2", "a", "b", "c", "d", "e", "f", "g", "h"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "bi1");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "unif" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "x1");
    param_names__.emplace_back(std::string() + "x2");
    param_names__.emplace_back(std::string() + "a1");
    param_names__.emplace_back(std::string() + "a2");
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "b2");
    param_names__.emplace_back(std::string() + "c1");
    param_names__.emplace_back(std::string() + "c2");
    param_names__.emplace_back(std::string() + "d1");
    param_names__.emplace_back(std::string() + "d2");
    param_names__.emplace_back(std::string() + "e1");
    param_names__.emplace_back(std::string() + "e2");
    param_names__.emplace_back(std::string() + "f1");
    param_names__.emplace_back(std::string() + "f2");
    param_names__.emplace_back(std::string() + "g1");
    param_names__.emplace_back(std::string() + "g2");
    param_names__.emplace_back(std::string() + "h1");
    param_names__.emplace_back(std::string() + "h2");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "e");
      param_names__.emplace_back(std::string() + "f");
      param_names__.emplace_back(std::string() + "g");
      param_names__.emplace_back(std::string() + "h");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "bi1");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "unif" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "x1");
    param_names__.emplace_back(std::string() + "x2");
    param_names__.emplace_back(std::string() + "a1");
    param_names__.emplace_back(std::string() + "a2");
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "b2");
    param_names__.emplace_back(std::string() + "c1");
    param_names__.emplace_back(std::string() + "c2");
    param_names__.emplace_back(std::string() + "d1");
    param_names__.emplace_back(std::string() + "d2");
    param_names__.emplace_back(std::string() + "e1");
    param_names__.emplace_back(std::string() + "e2");
    param_names__.emplace_back(std::string() + "f1");
    param_names__.emplace_back(std::string() + "f2");
    param_names__.emplace_back(std::string() + "g1");
    param_names__.emplace_back(std::string() + "g2");
    param_names__.emplace_back(std::string() + "h1");
    param_names__.emplace_back(std::string() + "h2");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "e");
      param_names__.emplace_back(std::string() + "f");
      param_names__.emplace_back(std::string() + "g");
      param_names__.emplace_back(std::string() + "h");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"bi1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"unif\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"e1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"e2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"g1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"g2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"h1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"h2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"e\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"g\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"bi1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"unif\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"e1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"e2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"g1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"g2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"h1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"h2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"e\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"g\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((1 + 5) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
           + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((1 + 5) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
           + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 20> names__{"bi1", "unif", "x1", "x2",
      "a1", "a2", "b1", "b2", "c1", "c2", "d1", "d2", "e1", "e2", "f1", "f2",
      "g1", "g2", "h1", "h2"};
      const std::array<Eigen::Index, 20> constrain_param_sizes__{1, 5, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = radarquery_model_namespace::radarquery_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return radarquery_model_namespace::profiles__;
}

#endif



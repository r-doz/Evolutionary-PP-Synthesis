# Grammar for a SOGA program

<fc> ::= <code>
<code> ::= <instr> |<instr>{::}<code> #| <instr>{::}<instr>

#Definition of instruction

<instr> ::= <assignment> #| <conditional> | <loop>

#Assignment

<assignment> ::= <idv> = <const>; | <idv> = <add>; | <idv> = <mul>;

<const> ::= <const_term> | <const_term> + <const_term> | <const_term> - <const_term>
<const_term> ::= <num> | <num> * <num> 

<add> ::= <add_term> | <add_term> + <add_term> | <add_term>  - <add_term>
<add_term> ::= <vars> | <num>  * <vars> | <const_term>
<vars> ::= <idv> | <gm> | <uniform>
<gm> ::= gm(<list>,<list>,<list>)
<list> ::= [<element>]
<element> ::= <num> | <num>,<element> | <num>.<num> | <num>.<num>,<element>
<uniform> ::= uniform([<num>, <num>], <num_pos>)

<mul> ::= <vars> * <vars> | <num> * <vars>


#Conditional

<conditional> ::= if <bexpr> { {: <block> :} } else { {: <block> :} } end if;

<bexpr> ::= <idv> <equal> <num> | <lexpr> <loperator> <num>
<lexpr> ::= <monom> | <monom> + <lexpr> | <monom> - <lexpr>
<monom> ::= <vars> | <num> * <vars> 
<loperator> ::=  < | <= | >= | >
<equal> ::= == | != 

<block> ::= <instr> | <instr> {::} <block>


#Loop

<loop> ::= for <idv> in range(<num>) { {: <block> :} } end for;


#Terminal nodes

<num> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
<num_pos> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
<idv> ::=  a | b | c | d | e